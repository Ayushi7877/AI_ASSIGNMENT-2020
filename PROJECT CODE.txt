import pandas as pd
import numpy as np
import datetime as dt
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import r2_score 


df=pd.read_csv("CarPrice_Assignment.csv")
df.isnull().sum(axis=0)
df.duplicated().sum(axis=0)
df['Company']=df.CarName.str.split(' ', expand=True)[0]
def doorn(a):
    if a=='two':
        return(2)
    else:
        return(4)
    
    
def cylndn(b):
    if b=='two':
        return(2)
    elif b=='three':
        return(3)
    elif b=='four':
        return(4)
    elif b=='five':
        return(5)
    elif b=='six':
        return(6)
    elif b=='eight':
        return(8)
    else:
        return(12)
        
df['doorn']=df.doornumber.apply(doorn)
df['cylindern']=df.cylindernumber.apply(cylndn)
df1=df
df1.drop('doornumber',axis=1, inplace=True)
df1.drop('cylindernumber', axis=1, inplace=True)
df1.drop('car_ID', axis=1, inplace=True)
df1.drop('CarName', axis=1, inplace=True)
list(df1.Company.unique())
df1.loc[(df1.Company=='maxda'),'Company']='mazda'
df1.loc[(df1.Company=='Nissan'),'Company']='nissan'
df1.loc[(df1.Company=='porcshce'),'Company']='porsche'
df1.loc[(df1.Company=='toyouta'),'Company']='toyota'
df1.loc[(df1.Company=='vokswagen'),'Company']='volkswagen'
df1.loc[(df1.Company=='vw'),'Company']='volkswagen'
gd=pd.get_dummies(df1.drivewheel, drop_first=True)
df1=pd.concat([gd,df1],axis=1)
df1.drop('drivewheel', axis=1, inplace=True)
gd=pd.get_dummies(df1.carbody, drop_first=True)
df1=pd.concat([gd,df1],axis=1)
df1.drop('carbody', axis=1, inplace=True)
gd=pd.get_dummies(df1.enginetype, drop_first=True)
df1=pd.concat([gd,df1],axis=1)
df1.drop('enginetype', axis=1, inplace=True)
gd=pd.get_dummies(df1.fuelsystem, drop_first=True)
df1=pd.concat([gd,df1],axis=1)
df1.drop('fuelsystem', axis=1, inplace=True)
gd=pd.get_dummies(df1.aspiration, drop_first=True)
df1=pd.concat([gd,df1],axis=1)
df1.drop('aspiration', axis=1, inplace=True)
gd=pd.get_dummies(df1.enginelocation, drop_first=True)
df1=pd.concat([gd,df1],axis=1)
df1.drop('enginelocation', axis=1, inplace=True)
gd=pd.get_dummies(df1.Company, drop_first=True)
df1=pd.concat([gd,df1],axis=1)
df1.drop('Company', axis=1, inplace=True)
gd=pd.get_dummies(df1.fueltype, drop_first=True)
df1=pd.concat([gd,df1],axis=1)
df1.drop('fueltype', axis=1, inplace=True)

'''
sns.pairplot(df1)
plt.show()
'''
plt.figure(figsize=(22, 14))
plt.subplot(2,2,1)
sns.scatterplot(x = 'enginesize', y = 'price', data = df1)
plt.subplot(2,2,2)
sns.scatterplot(x = 'horsepower', y = 'price', data = df1)
plt.subplot(2,2,3)
sns.scatterplot(x = 'wheelbase', y = 'price', data = df1)
plt.subplot(2,2,4)
sns.scatterplot(x = 'carlength', y = 'price', data = df1)
plt.show()
plt.figure(figsize = (20, 10))
sns.boxplot(x = 'carbody', y = 'price', hue = 'cylindern', data = df)
plt.show()
plt.figure(figsize = (20, 10))
sns.boxplot(x = 'carbody', y = 'price', hue = 'fueltype', data = df)
plt.show()
from sklearn.model_selection import train_test_split
np.random.seed(0)
df_train, df_test = train_test_split(df1, train_size = 0.7, test_size = 0.3, random_state = 100)
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
num_vars = ['wheelbase', 'carlength', 'carwidth', 'curbweight', 'enginesize', 'boreratio', 'stroke', 'compressionratio', 
            'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price','symboling']
df_train[num_vars] = scaler.fit_transform(df_train[num_vars])
print(df_train.head())
print(df_train.describe())
plt.figure(figsize = (32, 20))
sns.heatmap(df_train.corr(), annot = True, cmap="YlGnBu")
plt.show()
plt.figure(figsize=[6,6])
plt.scatter(df_train.enginesize, df_train.price)
plt.show()
y_train = df_train.pop('price')
X_train = df_train
import statsmodels.api as sm
X_train_lm = sm.add_constant(X_train[['horsepower']])
lr = sm.OLS(y_train, X_train_lm).fit()
lr.params
plt.scatter(X_train_lm.iloc[:, 1], y_train)
plt.plot(X_train_lm.iloc[:, 1], -0.0194 + 1.050*X_train_lm.iloc[:, 1], 'r')
plt.show()
print(lr.summary())
X_train_lm = X_train[['horsepower','enginesize', 'rear', 'turbo', '2bbl', '4bbl','wheelbase', 'carlength', 'carwidth', 'idi'
                      ,'mfi', 'mpfi','spdi','spfi','dohcv','l','ohcf','ohcv','hardtop','hatchback','sedan','wagon','fwd','rwd','boreratio','curbweight','stroke','compressionratio','peakrpm','citympg',
                      'highwaympg','doorn','cylindern','gas','audi','bmw','buick','chevrolet','dodge','honda','isuzu','jaguar','mazda','mercury',
                      'mitsubishi','nissan','peugeot','plymouth','porsche','renault','saab','subaru','toyota','volkswagen','volvo','symboling']]
import statsmodels.api as sm
X_train_lm = sm.add_constant(X_train_lm)
lr = sm.OLS(y_train, X_train_lm).fit()
lr.params
print(lr.summary())
from statsmodels.stats.outliers_influence import variance_inflation_factor
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('rear',1)
X_train_lm = sm.add_constant(X)
lr_2 = sm.OLS(y_train, X_train_lm).fit()
print(lr_2.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('idi',1)
X_train_lm = sm.add_constant(X)
lr_2 = sm.OLS(y_train, X_train_lm).fit()
print(lr_2.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('enginesize',1)
X_train_lm = sm.add_constant(X)
lr_3 = sm.OLS(y_train, X_train_lm).fit()
print(lr_3.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('gas',1)
X_train_lm = sm.add_constant(X)
lr_4 = sm.OLS(y_train, X_train_lm).fit()
print(lr_4.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('subaru',1)
X_train_lm = sm.add_constant(X)
lr_36 = sm.OLS(y_train, X_train_lm).fit()
print(lr_36.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('mpfi',1)
X_train_lm = sm.add_constant(X)
lr_5 = sm.OLS(y_train, X_train_lm).fit()
print(lr_5.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('citympg',1)
X_train_lm = sm.add_constant(X)
lr_6 = sm.OLS(y_train, X_train_lm).fit()
print(lr_6.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('curbweight',1)
X_train_lm = sm.add_constant(X)
lr_7 = sm.OLS(y_train, X_train_lm).fit()
print(lr_7.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('horsepower',1)
X_train_lm = sm.add_constant(X)
lr_8 = sm.OLS(y_train, X_train_lm).fit()
print(lr_8.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('sedan',1)
X_train_lm = sm.add_constant(X)
lr_9 = sm.OLS(y_train, X_train_lm).fit()
print(lr_9.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('carlength',1)
X_train_lm = sm.add_constant(X)
lr_10 = sm.OLS(y_train, X_train_lm).fit()
print(lr_10.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('peugeot',1)
X_train_lm = sm.add_constant(X)
lr_11 = sm.OLS(y_train, X_train_lm).fit()
print(lr_11.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('carwidth',1)
X_train_lm = sm.add_constant(X)
lr_12 = sm.OLS(y_train, X_train_lm).fit()
print(lr_12.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('rwd',1)
X_train_lm = sm.add_constant(X)
lr_13 = sm.OLS(y_train, X_train_lm).fit()
print(lr_13.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('highwaympg',1)
X_train_lm = sm.add_constant(X)
lr_14 = sm.OLS(y_train, X_train_lm).fit()
print(lr_14.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('toyota',1)
X_train_lm = sm.add_constant(X)
lr_15 = sm.OLS(y_train, X_train_lm).fit()
print(lr_15.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('wheelbase',1)
X_train_lm = sm.add_constant(X)
lr_16 = sm.OLS(y_train, X_train_lm).fit()
print(lr_16.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
X=X_train_lm.drop('cylindern',1)
X_train_lm = sm.add_constant(X)
lr_17 = sm.OLS(y_train, X_train_lm).fit()
print(lr_17.summary())
vif = pd.DataFrame()
vif['Features'] = X_train_lm.columns
vif['VIF'] = [variance_inflation_factor(X_train_lm.values, i) for i in range(X_train_lm.shape[1])]
vif['VIF'] = round(vif['VIF'], 2)
vif = vif.sort_values(by = "VIF", ascending = False)
vif
y_train_price = lr_17.predict(X_train_lm)
fig = plt.figure()
sns.distplot((y_train - y_train_price), bins = 20)
fig.suptitle('Error Terms', fontsize = 20)                  
plt.xlabel('Errors', fontsize = 18)       
df_test[num_vars] = scaler.fit_transform(df_test[num_vars])
df_test.describe()
y_test = df_test.pop('price')
X_test = df_test
X_test_m4 = sm.add_constant(X_test)
X_train_lm.columns
X_test_m5=X_test_m4[['const', 'turbo', '2bbl', '4bbl', 'mfi', 'spdi', 'spfi', 'dohcv', 'l',
       'ohcf', 'ohcv', 'hardtop', 'hatchback', 'wagon', 'fwd', 'boreratio',
       'stroke', 'compressionratio', 'peakrpm', 'doorn', 'audi', 'bmw',
       'buick', 'chevrolet', 'dodge', 'honda', 'isuzu', 'jaguar', 'mazda',
       'mercury', 'mitsubishi', 'nissan', 'plymouth', 'porsche', 'renault',
       'saab', 'volkswagen', 'volvo', 'symboling']].copy()
y_pred_m5 = lr_17.predict(X_test_m5)
fig = plt.figure()
plt.scatter(y_test, y_pred_m5)
fig.suptitle('y_test vs y_pred', fontsize = 20)               
plt.xlabel('y_test', fontsize = 18)                          
plt.ylabel('y_pred', fontsize = 16)  
print(lr_17.summary())
print(r2_score(y_test, y_pred_m5))